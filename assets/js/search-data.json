{
  
    
        "post0": {
            "title": "(R) 데이터의 특성",
            "content": "모든 연속형 변수를 두 번 이상 측정하면 다른 값이 나온다. 이 때 변수의 측정값이 변하는 경향을 변동(variation)이라고 말한다. 범주형 변수 역시 서로 다른 피실험자 또는 다른 시간을 측정하는 경우 다를 수 있다. 결국 각각의 측정값은 서로 다른 약간의 오차를 포함하는데 이 때 모든 변수들은 고유한 변동 패턴을 가지고 있고 이러한 패턴을 이해하는 가장 좋은 방법은 변수들 값의 분포를 시각화 하는 것이다. | . &#49884;&#44033;&#54868; . library(&#39;tidyverse&#39;) . - 범주형 변수 . ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) . diamonds %&gt;% count(cut) . A tibble: 5 × 2 cutn . &lt;ord&gt;&lt;int&gt; . Fair | 1610 | . Good | 4906 | . Very Good | 12082 | . Premium | 13791 | . Ideal | 21551 | . - 연속형 변수 . ggplot(data = diamonds) + geom_histogram(mapping = aes(x= carat), binwidth = 0.5) . diamonds %&gt;% count(cut_width(carat, 0.5)) . A tibble: 11 × 2 cut_width(carat, 0.5)n . &lt;fct&gt;&lt;int&gt; . [-0.25,0.25] | 785 | . (0.25,0.75] | 29498 | . (0.75,1.25] | 15977 | . (1.25,1.75] | 5313 | . (1.75,2.25] | 2002 | . (2.25,2.75] | 322 | . (2.75,3.25] | 32 | . (3.25,3.75] | 5 | . (3.75,4.25] | 4 | . (4.25,4.75] | 1 | . (4.75,5.25] | 1 | . smaller &lt;- diamonds %&gt;% filter(carat &lt; 3) ggplot(data = smaller, mapping = aes(x = carat)) + geom_histogram(binwidth = 0.1) . geom_freqpoly : 같은 플롯에서 여러개의 히스토그램을 겹처서 그리기 . ggplot(data = smaller, mapping = aes(x = carat, color = cut)) + geom_freqpoly(binwidth = 0.1) . ggplot(data = smaller, mapping = aes(x = carat)) + geom_histogram(binwidth = 0.01) . 위의 그래프는 일부 캐럿의 다이아몬드가 많은 의문을 자아낸다.일반적이라면 정규분포 혹은 고르게 분포할 것으로 예상해 볼 수 있겠다. | . faithful %&gt;% head #Yellowstone 분출간격 자료 . A data.frame: 6 × 2 eruptionswaiting . &lt;dbl&gt;&lt;dbl&gt; . 13.600 | 79 | . 21.800 | 54 | . 33.333 | 74 | . 42.283 | 62 | . 54.533 | 85 | . 62.883 | 55 | . ggplot(data = faithful, mapping = aes(x = eruptions)) + geom_histogram(binwidth = 0.25) . ggplot(diamonds) + geom_histogram(mapping = aes(x = y), binwidth = 0.5) . 이런 특정한 구간에 관측값이 쏠려 있는 경우 이상값을 알아내기 어려움.그래서 보고 싶은 구간을 확대해서 본다. | . coord_cartesian : x축 or y축의 지정한 특정 범위를 확대해서 보여줌. . ggplot(diamonds) + geom_histogram(mapping = aes(x = y), binwidth = 0.5) + coord_cartesian(ylim = c(0, 50)) . 원본 y축이 0~ 12,000 범위였는데 0 ~ 50 구간으로 확대해서 본 모습 보이지 않던 이상치들이 보이기 시작함. | . - 위의 그래프에서 보인 두개의 이상값 추출하기 위해 범위를 특정해서 필터링해보기 . unusual &lt;- diamonds %&gt;% filter(y &lt; 3 | y &gt; 20) %&gt;% select(price, x, y, z) %&gt;% arrange(y) . unusual . A tibble: 9 × 4 pricexyz . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 5139 | 0.00 | 0.0 | 0.00 | . 6381 | 0.00 | 0.0 | 0.00 | . 12800 | 0.00 | 0.0 | 0.00 | . 15686 | 0.00 | 0.0 | 0.00 | . 18034 | 0.00 | 0.0 | 0.00 | . 2130 | 0.00 | 0.0 | 0.00 | . 2130 | 0.00 | 0.0 | 0.00 | . 2075 | 5.15 | 31.8 | 5.12 | . 12210 | 8.09 | 58.9 | 8.06 | . &#44208;&#52769;&#44050; . 이상값 처리법 두가지 1) 이상값이 포함된 행 전체를 지운다. 2) 이상값을 결측값으로 변경한다. | . 1) 지우기(다른 측정값은 유용할 수도 있으므로 권장되지 않음) . diamonds2 &lt;- diamonds %&gt;% filter(between(y, 3, 20)) . diamonds2 %&gt;% head . A tibble: 6 × 10 caratcutcolorclaritydepthtablepricexyz . &lt;dbl&gt;&lt;ord&gt;&lt;ord&gt;&lt;ord&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 0.23 | Ideal | E | SI2 | 61.5 | 55 | 326 | 3.95 | 3.98 | 2.43 | . 0.21 | Premium | E | SI1 | 59.8 | 61 | 326 | 3.89 | 3.84 | 2.31 | . 0.23 | Good | E | VS1 | 56.9 | 65 | 327 | 4.05 | 4.07 | 2.31 | . 0.29 | Premium | I | VS2 | 62.4 | 58 | 334 | 4.20 | 4.23 | 2.63 | . 0.31 | Good | J | SI2 | 63.3 | 58 | 335 | 4.34 | 4.35 | 2.75 | . 0.24 | Very Good | J | VVS2 | 62.8 | 57 | 336 | 3.94 | 3.96 | 2.48 | . 2) 이상값 -&gt; 결측값 . diamonds2 &lt;- diamonds %&gt;% mutate(y = ifelse(y &lt; 3 | y &gt; 20, NA, y)) diamonds2 %&gt;% head . A tibble: 6 × 10 caratcutcolorclaritydepthtablepricexyz . &lt;dbl&gt;&lt;ord&gt;&lt;ord&gt;&lt;ord&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 0.23 | Ideal | E | SI2 | 61.5 | 55 | 326 | 3.95 | 3.98 | 2.43 | . 0.21 | Premium | E | SI1 | 59.8 | 61 | 326 | 3.89 | 3.84 | 2.31 | . 0.23 | Good | E | VS1 | 56.9 | 65 | 327 | 4.05 | 4.07 | 2.31 | . 0.29 | Premium | I | VS2 | 62.4 | 58 | 334 | 4.20 | 4.23 | 2.63 | . 0.31 | Good | J | SI2 | 63.3 | 58 | 335 | 4.34 | 4.35 | 2.75 | . 0.24 | Very Good | J | VVS2 | 62.8 | 57 | 336 | 3.94 | 3.96 | 2.48 | . ggplot(data = diamonds2, mapping = aes(x = x, y = y)) + geom_point() . Warning message: “Removed 9 rows containing missing values (geom_point).” . library(&#39;nycflights13&#39;) #13년도 뉴욕항공편 데이터 . 여기서 . nycflights13::flights$dep_time . 값이 NA인 값은 해당 항공편 운항이 취소된 것을 의미 . - 취소된 비행기의 예정 출발 시각과 취소되지 않은 비행기의 출발 시각 비교해보기 . nycflights13::flights %&gt;% mutate( cancelled = is.na(dep_time), sched_hour = sched_dep_time %/% 100, sched_min = sched_dep_time %% 100, sched_dep_time = sched_hour + sched_min / 60 ) %&gt;% ggplot(mapping = aes(sched_dep_time)) + geom_freqpoly( mapping = aes(color = cancelled), binwidth = 1/4 ) . 그래프는 제대로 그려졌으나 취소된 항공편이 취소되지 않은 항공편에 비해 현저히 적기 때문에 이 플랏은 유용하지 않음. TRUE가 FALSE와 비슷한 수준(count)이라면 유의미한 비교가 가능할듯.(시계열 자료 느낌) | . &#44277;&#48320;&#46041; . 변동이 변수 내의 움직임을 설명한다면 공변동(covariation)은 변수들 간의 움직임을 설명한다. 즉, 공변동은 둘 이상의 변숫값이 연관되어 동시에 변하는 경향 . 공변동을 시각화 방법은 변수의 유형에 따라 달라진다. | . - 기존의 방식의 문제는 빈도수가 차이날 때 변수들의 움직임이 잘 보이지 않는다는 것이다. . ggplot(data = diamonds, mapping = aes(x = price)) + geom_freqpoly(mapping = aes(color = cut), binwidth = 500) . ggplot(diamonds) + geom_bar(mapping = aes(x = cut)) . &#48169;&#48277;1) density . ..density.. : 전체적인 빈도수가 다르기에 큰 그래프에 작은 그래프들이 묻혀 모든 그래프들의 추이를 비교하기에는 어려움.(특히 빈도가 작아서 잘 안보이는 것들) density를 사용하면 그래프 아래 넓이를 1로 고정시켜주기에 각각의 추이 자체만을 비교할 때 도움이 된다. 이런식으로 안쓰고 geom_density() 형태로도 사용가능 . ggplot( data = diamonds, mapping = aes(x = price, y = ..density..) ) + geom_freqpoly(mapping = aes(color = cut), binwidth = 500) . 범주형 변수로 구분된 연속형 변수의 분포를 나타내는 또 다른 방법은 boxplot | . &#48169;&#48277;2) boxplot . ggplot(data = diamonds, mapping = aes(x = cut, y= price)) + geom_boxplot() . 박스 플롯은 분포에 대해 더 적은 정보를 확인할 수 있지만, 간단하므로 쉽게 비교할 수 있다. 위의 플롯에서 얻을 수 있는 정보는 &#39;더 좋은 품질의 다이아몬드가 평균적으로는 더 저렴하다&#39;는 직관에 반하는 사실이다. | . &#49692;&#49436;&#44032; &#50630;&#45716; &#48320;&#49688;&#51032; &#44277;&#48320;&#46041; . cut의 경우 fair ~ ideal까지 순서에 따라 나열된 것을 비교해 분석해 보았다. 하지만, 대부분의 범주형 변수에는 이러한 고유한 순서가 없기에 순서를 변경하여 더 유용한 정보를 제공하도록 표현할 수 있다. 이 때, reorder사용 | . reorder : 순서 재 정렬 . - mpg데이터 셋의 class 변수의 hwy를 순서 없이 그냥 나열한 plot . ggplot(data = mpg, mapping = aes(x = class, y= hwy)) + geom_boxplot() . - 추세를 더 쉽게 파악하기 위해 hwy 변수의 중간값을 기준으로 class변수의 순서를 변경 . ggplot(data = mpg) + geom_boxplot( mapping = aes( x = reorder(class, hwy, FUN = median), y = hwy ) ) . - 변수의 이름이 길다면 coord_flip으로 축 변경 . ggplot(data = mpg) + geom_boxplot( mapping = aes( x = reorder(class, hwy, FUN = median), y = hwy ) ) + coord_flip() . 1) &#46160; &#44060;&#51032; &#48276;&#51452;&#54805; &#48320;&#49688; &#49324;&#51060;&#51032; &#44277;&#48320;&#46041; &#49884;&#44033;&#54868;&#54616;&#44592; . geom_count : 각 조합에 대한 관측값 수 count . ggplot(data = diamonds) + geom_count(mapping = aes(x = cut, y= color)) . count : n()과 역할 같음, 다만 더 간단하다 . diamonds %&gt;% count(color, cut) %&gt;% head . A tibble: 6 × 3 colorcutn . &lt;ord&gt;&lt;ord&gt;&lt;int&gt; . D | Fair | 163 | . D | Good | 662 | . D | Very Good | 1513 | . D | Premium | 1603 | . D | Ideal | 2834 | . E | Fair | 224 | . - geom_tile()함수와 fill심미성으로 시각화 . 심미성 :점의 크기, 모양, 색깔 같이 객체를 다르게 표현하는 속성 . diamonds %&gt;% count(color, cut) %&gt;% ggplot(mapping = aes(x = color, y = cut)) + geom_tile(mapping = aes(fill = n)) . 2) &#46160; &#44060;&#51032; &#50672;&#49549;&#54805; &#48320;&#49688; &#49324;&#51060;&#51032; &#44277;&#48320;&#46041; &#49884;&#44033;&#54868;&#54616;&#44592; . - geom_point사용 . ggplot(data = diamonds) + geom_point(mapping = aes(x = carat, y = price)) . - 겹칠 때 잘 안보이므로 alpha사용 . ggplot(data = diamonds) + geom_point( mapping = aes(x = carat, y= price), alpha = 0.01 ) . 매우 큰 데이터셋에서는 투명도의 효과가 미비할 수도 있다. 이 때는 bin을 사용한다. 이전에 사용한 geom_histogram, geom_freqpoly은 1차원의 빈이다. geom_bin2d, geom_hex 는 2차원의 빈 이들은 좌표 평면을 2D 빈으로 나눈 후, 각 빈에 몇 개의 점이 해당하는지 나타내기 위해 색상 채우기를 사용 이 때, geom_bin2d는 직사각형 빈을 만들고, geom_hex는 육각형 빈을 만든다. | . library(&#39;hexbin&#39;) . ggplot(data = smaller) + geom_bin2d(mapping = aes(x = carat, y = price)) . ggplot(data = smaller) + geom_hex(mapping = aes(x = carat, y = price)) . - (앞에 나옴) 연속 변수를 그룹화하여 범주형 변수처럼 만들기 . ggplot(data = smaller, mapping = aes(x = carat, y= price)) + geom_boxplot(mapping = aes(group = cut_width(carat, 0.1))) . 이것의 문제는 관측값의 개수는 무시하고 보여주기에 빈도에 대한 정보는 없음 다음은 관측값 수까지 반영한 방법이다. varwidth = TRUE : 이제 박스 플롯의 너비는 점의 개수와 비례한다 유사한 방법으로 cut_number : 각 빈에 대략 같은 수의 점을 표시 | . - cut_number이용 . ggplot(data = smaller, mapping = aes(x = carat, y = price)) + geom_boxplot(mapping = aes(group = cut_number(carat, 20))) . &#54056;&#53556;&#44284; &#47784;&#45944;(&#9733;)-&#49900;&#54868; . 데이터의 패턴은 상관관계에 대한 단서를 제공한다. 두 변수 사이에 규칙적인 관계가 존재하면 데이터의 패턴으로 나타난다. 패턴을 발견하게 되면 스스로에게 질문해본다.이 패턴은 우연의 일치(즉, 랜덤한 가능성) 때문인가? 패턴이 내포하는 상관관계를 어떻게 설명할 수 있는가? 패턴이 내포하는 상관관계는 얼마나 강한가? 다른 변수가 그 상관관계에 영향을 줄 수 있는가? 데이터의 개별 하위집단을 살펴보면 상관관계가 변경되는가? . | . - Old Faithful 분출 시간과 분출 사이의 시간 사이의 산점도는 분출 사이의 대기 시간이 길수록 분출 시간도 길어지는 패턴을 보인다. . ggplot(data = faithful) + geom_point(mapping = aes(x = eruptions, y = waiting)) . 변동이 불확실성이 만드는 현상으로 생각한다면 공변동은 불확실성을 감소시키는 현상이다. 두 개의 변수가 함께 변동하면 한 변수의 값을 사용하여 다른 변수의 값을 잘 예측할 수 있다. 인과관계(특별한 경우)로 인해 공변동이 생기는 경우, 한 변수의 값을 다른 변수의 값을 통제하는 데 사용할 수 있다. 모델은 데이터에서 패턴을 추출하는 도구이다. 다이아몬드 데이터에서 컷팅과 캐럿, 캐럿과 가격은 밀접하게 관려노디어 있으므로 컷팅과 가격의 상관관계를 이해하기 어렵다. 모델을 활용하여 가격과 캐럿 간의 매우 강력한 상관관계를 제거하면 남아있는 중요한 세부요소들을 탐색할 수 있다. . - 다음은 carat으로 price를 예측하는 모델을 적합시킨 다음, 잔차(예측값과 실제값의 차이)를 계산한다. 캐럿의 효과가 제거되면 잔차는 다이아몬드의 가격에 대한 관점을 제공하기에 . library(&#39;modelr&#39;) . mod &lt;- lm(log(price) ~ log(carat), data = diamonds) diamonds2 &lt;- diamonds %&gt;% add_residuals(mod) %&gt;% mutate(resid = exp(resid)) ggplot(data = diamonds2) + geom_point(mapping = aes(x = carat, y = resid)) . ggplot(data = diamonds2) + geom_boxplot(mapping = aes(x = cut, y = resid)) .",
            "url": "https://jjyun98.github.io/main/2022/07/22/_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EB%B3%80%ED%98%95_2.html",
            "relUrl": "/2022/07/22/_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EB%B3%80%ED%98%95_2.html",
            "date": " • Jul 22, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "(R) Data handling",
            "content": "tag :R for data science . library(&#39;tidyverse&#39;) library(&#39;nycflights13&#39;) #2013년 뉴욕시 출발 항공편 정보 패키지 . flights %&gt;% head . A tibble: 6 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 227 | 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 160 | 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 183 | 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 116 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 150 | 719 | 5 | 58 | 2013-01-01 05:00:00 | . dttm는 데이트-타임형(날짜 + 시간) 의미 . filter(flights, month == 1, day == 1) %&gt;% head . A tibble: 6 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 227 | 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 160 | 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 183 | 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 116 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 150 | 719 | 5 | 58 | 2013-01-01 05:00:00 | . near(sqrt(2) ^2, 2) . TRUE filter( flights, month == 11 | month == 12) %&gt;% head . A tibble: 6 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 11 | 1 | 5 | 2359 | 6 | 352 | 345 | 7 | B6 | 745 | N568JB | JFK | PSE | 205 | 1617 | 23 | 59 | 2013-11-01 23:00:00 | . 2013 | 11 | 1 | 35 | 2250 | 105 | 123 | 2356 | 87 | B6 | 1816 | N353JB | JFK | SYR | 36 | 209 | 22 | 50 | 2013-11-01 22:00:00 | . 2013 | 11 | 1 | 455 | 500 | -5 | 641 | 651 | -10 | US | 1895 | N192UW | EWR | CLT | 88 | 529 | 5 | 0 | 2013-11-01 05:00:00 | . 2013 | 11 | 1 | 539 | 545 | -6 | 856 | 827 | 29 | UA | 1714 | N38727 | LGA | IAH | 229 | 1416 | 5 | 45 | 2013-11-01 05:00:00 | . 2013 | 11 | 1 | 542 | 545 | -3 | 831 | 855 | -24 | AA | 2243 | N5CLAA | JFK | MIA | 147 | 1089 | 5 | 45 | 2013-11-01 05:00:00 | . 2013 | 11 | 1 | 549 | 600 | -11 | 912 | 923 | -11 | UA | 303 | N595UA | JFK | SFO | 359 | 2586 | 6 | 0 | 2013-11-01 06:00:00 | . %in% : 이 안에 있는 모든 것 꺼냄 . nov_dec &lt;- filter(flights, month %in% c(11,12)) nov_dec %&gt;% tail . A tibble: 6 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 12 | 31 | NA | 855 | NA | NA | 1142 | NA | UA | 1506 | NA | EWR | JAC | NA | 1874 | 8 | 55 | 2013-12-31 08:00:00 | . 2013 | 12 | 31 | NA | 705 | NA | NA | 931 | NA | UA | 1729 | NA | EWR | DEN | NA | 1605 | 7 | 5 | 2013-12-31 07:00:00 | . 2013 | 12 | 31 | NA | 825 | NA | NA | 1029 | NA | US | 1831 | NA | JFK | CLT | NA | 541 | 8 | 25 | 2013-12-31 08:00:00 | . 2013 | 12 | 31 | NA | 1615 | NA | NA | 1800 | NA | MQ | 3301 | N844MQ | LGA | RDU | NA | 431 | 16 | 15 | 2013-12-31 16:00:00 | . 2013 | 12 | 31 | NA | 600 | NA | NA | 735 | NA | UA | 219 | NA | EWR | ORD | NA | 719 | 6 | 0 | 2013-12-31 06:00:00 | . 2013 | 12 | 31 | NA | 830 | NA | NA | 1154 | NA | UA | 443 | NA | JFK | LAX | NA | 2475 | 8 | 30 | 2013-12-31 08:00:00 | . filter(flights, !(arr_delay &gt; 120 | dep_delay &gt; 120)) %&gt;% head . A tibble: 6 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 227 | 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 160 | 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 183 | 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 116 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 150 | 719 | 5 | 58 | 2013-01-01 05:00:00 | . df &lt;- tibble(x = c(1, NA, 3)) . df . A tibble: 3 × 1 x . &lt;dbl&gt; . 1 | . NA | . 3 | . filter(df, x &gt;1) . A tibble: 1 × 1 x . &lt;dbl&gt; . 3 | . arrange : desc와 같이 정렬할 때 사용하는 filter . arrange(flights, desc(arr_delay)) %&gt;% head . A tibble: 6 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 9 | 641 | 900 | 1301 | 1242 | 1530 | 1272 | HA | 51 | N384HA | JFK | HNL | 640 | 4983 | 9 | 0 | 2013-01-09 09:00:00 | . 2013 | 6 | 15 | 1432 | 1935 | 1137 | 1607 | 2120 | 1127 | MQ | 3535 | N504MQ | JFK | CMH | 74 | 483 | 19 | 35 | 2013-06-15 19:00:00 | . 2013 | 1 | 10 | 1121 | 1635 | 1126 | 1239 | 1810 | 1109 | MQ | 3695 | N517MQ | EWR | ORD | 111 | 719 | 16 | 35 | 2013-01-10 16:00:00 | . 2013 | 9 | 20 | 1139 | 1845 | 1014 | 1457 | 2210 | 1007 | AA | 177 | N338AA | JFK | SFO | 354 | 2586 | 18 | 45 | 2013-09-20 18:00:00 | . 2013 | 7 | 22 | 845 | 1600 | 1005 | 1044 | 1815 | 989 | MQ | 3075 | N665MQ | JFK | CVG | 96 | 589 | 16 | 0 | 2013-07-22 16:00:00 | . 2013 | 4 | 10 | 1100 | 1900 | 960 | 1342 | 2211 | 931 | DL | 2391 | N959DL | JFK | TPA | 139 | 1005 | 19 | 0 | 2013-04-10 19:00:00 | . df &lt;- tibble(x = c(5,2, NA)) arrange(df, x) . A tibble: 3 × 1 x . &lt;dbl&gt; . 2 | . 5 | . NA | . select : 관심 있는 열만 보기 . select(flights, year, month, day) %&gt;% head . A tibble: 6 × 3 yearmonthday . &lt;int&gt;&lt;int&gt;&lt;int&gt; . 2013 | 1 | 1 | . 2013 | 1 | 1 | . 2013 | 1 | 1 | . 2013 | 1 | 1 | . 2013 | 1 | 1 | . 2013 | 1 | 1 | . : a ~ b까지 . select(flights, year:arr_delay) %&gt;% head . A tibble: 6 × 9 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delay . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | . select(flights, -(year:air_time)) %&gt;% head . A tibble: 6 × 4 distancehourminutetime_hour . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 762 | 6 | 0 | 2013-01-01 06:00:00 | . 719 | 5 | 58 | 2013-01-01 05:00:00 | . - 추가 . select() 안에서 사용할 수 있는 함수들 . starts_with(&#39;abc&#39;) :&#39;abc&#39;로 시작하는 이름에 매칭 - ends_with(&quot;xyz&quot;) : &#39;xyz&#39;로 끝나는 이름에 매칭 | contains(&#39;abc&#39;) : &#39;abc&#39;를 포함한 이름에 매칭 | num_range(&#39;x&#39;, 1:3) : x1,x2,x3에 매칭 | . rename : 변수명 변경 . rename(flights, tail_num = tailnum) %&gt;% head . A tibble: 6 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttail_numorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 227 | 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 160 | 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 183 | 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 116 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 150 | 719 | 5 | 58 | 2013-01-01 05:00:00 | . everything: 몇 개의 변수를 데이터프레임 시작 부분으로 옮기고 싶을 때 사용 . select(flights, time_hour, air_time, everything()) %&gt;% head . A tibble: 6 × 19 time_hourair_timeyearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestdistancehourminute . &lt;dttm&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 2013-01-01 05:00:00 | 227 | 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 1400 | 5 | 15 | . 2013-01-01 05:00:00 | 227 | 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 1416 | 5 | 29 | . 2013-01-01 05:00:00 | 160 | 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 1089 | 5 | 40 | . 2013-01-01 05:00:00 | 183 | 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 1576 | 5 | 45 | . 2013-01-01 06:00:00 | 116 | 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 762 | 6 | 0 | . 2013-01-01 05:00:00 | 150 | 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 719 | 5 | 58 | . flights_sml &lt;- select(flights, year:day, ends_with(&#39;delay&#39;), distance, air_time ) . mutate : 새로운 변수 데이터셋 마지막에 추가 . mutate(flights_sml, gain = arr_delay - dep_delay, speed = distance / air_time * 60) %&gt;% head . A tibble: 6 × 9 yearmonthdaydep_delayarr_delaydistanceair_timegainspeed . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 2013 | 1 | 1 | 2 | 11 | 1400 | 227 | 9 | 370.0441 | . 2013 | 1 | 1 | 4 | 20 | 1416 | 227 | 16 | 374.2731 | . 2013 | 1 | 1 | 2 | 33 | 1089 | 160 | 31 | 408.3750 | . 2013 | 1 | 1 | -1 | -18 | 1576 | 183 | -17 | 516.7213 | . 2013 | 1 | 1 | -6 | -25 | 762 | 116 | -19 | 394.1379 | . 2013 | 1 | 1 | -4 | 12 | 719 | 150 | 16 | 287.6000 | . transmute : mutate에서 새 변수만 남기기 . transmute(flights, gain = arr_delay - dep_delay, hours = air_time / 60, gain_per_hour = gain / hour) %&gt;% head . A tibble: 6 × 3 gainhoursgain_per_hour . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 9 | 3.783333 | 1.800000 | . 16 | 3.783333 | 3.200000 | . 31 | 2.666667 | 6.200000 | . -17 | 3.050000 | -3.400000 | . -19 | 1.933333 | -3.166667 | . 16 | 2.500000 | 3.200000 | . %/% : 나누고 정수만 표기 %% : 나머지 lag : 한 칸 밀기 lead : 한 칸 당기기 . x &lt;- 1:10 lag(x) lead(x) . &lt;ol class=list-inline&gt;&lt;NA&gt; | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | &lt;/ol&gt; &lt;ol class=list-inline&gt;2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | &lt;NA&gt; | &lt;/ol&gt; cumsum : 누적 합 cummean : 누적 평균 . cumsum(x) . &lt;ol class=list-inline&gt;1 | 3 | 6 | 10 | 15 | 21 | 28 | 36 | 45 | 55 | &lt;/ol&gt; cummean(x) . &lt;ol class=list-inline&gt;1 | 1.5 | 2 | 2.5 | 3 | 3.5 | 4 | 4.5 | 5 | 5.5 | &lt;/ol&gt; 6. summarize&#47196; &#44536;&#47353;&#54868; &#50836;&#50557; . summarize(flights, delay = mean(dep_delay, na.rm = TRUE)) . A tibble: 1 × 1 delay . &lt;dbl&gt; . 12.63907 | . summarise는 group_by와 함께 써야 유용 | . by_day &lt;- group_by(flights, year, month, day) . summarize(by_day, delay = mean(dep_delay, na.rm = TRUE)) . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 365 × 4 yearmonthdaydelay . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt; . 2013 | 1 | 1 | 11.548926 | . 2013 | 1 | 2 | 13.858824 | . 2013 | 1 | 3 | 10.987832 | . 2013 | 1 | 4 | 8.951595 | . 2013 | 1 | 5 | 5.732218 | . 2013 | 1 | 6 | 7.148014 | . 2013 | 1 | 7 | 5.417204 | . 2013 | 1 | 8 | 2.553073 | . 2013 | 1 | 9 | 2.276477 | . 2013 | 1 | 10 | 2.844995 | . 2013 | 1 | 11 | 2.817193 | . 2013 | 1 | 12 | 1.596491 | . 2013 | 1 | 13 | 19.873153 | . 2013 | 1 | 14 | 2.792657 | . 2013 | 1 | 15 | 0.123723 | . 2013 | 1 | 16 | 24.612865 | . 2013 | 1 | 17 | 7.648148 | . 2013 | 1 | 18 | 6.765864 | . 2013 | 1 | 19 | 3.475483 | . 2013 | 1 | 20 | 6.783887 | . 2013 | 1 | 21 | 7.831858 | . 2013 | 1 | 22 | 12.499435 | . 2013 | 1 | 23 | 10.610360 | . 2013 | 1 | 24 | 19.465423 | . 2013 | 1 | 25 | 21.898534 | . 2013 | 1 | 26 | 7.213115 | . 2013 | 1 | 27 | 8.377943 | . 2013 | 1 | 28 | 15.138533 | . 2013 | 1 | 29 | 2.497149 | . 2013 | 1 | 30 | 28.623441 | . ⋮ | ⋮ | ⋮ | ⋮ | . 2013 | 12 | 2 | 9.021978 | . 2013 | 12 | 3 | 5.975258 | . 2013 | 12 | 4 | 5.366316 | . 2013 | 12 | 5 | 52.327990 | . 2013 | 12 | 6 | 16.134509 | . 2013 | 12 | 7 | 4.860327 | . 2013 | 12 | 8 | 21.515337 | . 2013 | 12 | 9 | 34.800221 | . 2013 | 12 | 10 | 26.465494 | . 2013 | 12 | 11 | 7.058263 | . 2013 | 12 | 12 | 7.527518 | . 2013 | 12 | 13 | 5.256995 | . 2013 | 12 | 14 | 28.361552 | . 2013 | 12 | 15 | 19.573871 | . 2013 | 12 | 16 | 11.741127 | . 2013 | 12 | 17 | 40.705602 | . 2013 | 12 | 18 | 14.008395 | . 2013 | 12 | 19 | 16.372165 | . 2013 | 12 | 20 | 17.266254 | . 2013 | 12 | 21 | 20.344956 | . 2013 | 12 | 22 | 29.239865 | . 2013 | 12 | 23 | 32.254149 | . 2013 | 12 | 24 | 6.765957 | . 2013 | 12 | 25 | 7.552448 | . 2013 | 12 | 26 | 14.417204 | . 2013 | 12 | 27 | 10.937630 | . 2013 | 12 | 28 | 7.981550 | . 2013 | 12 | 29 | 22.309551 | . 2013 | 12 | 30 | 10.698113 | . 2013 | 12 | 31 | 6.996053 | . by_dest &lt;- group_by(flights, dest) delay &lt;- summarize(by_dest, count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm = TRUE) ) . delay %&gt;% head . A tibble: 6 × 4 destcountdistdelay . &lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . ABQ | 254 | 1826.0000 | 4.381890 | . ACK | 265 | 199.0000 | 4.852273 | . ALB | 439 | 143.0000 | 14.397129 | . ANC | 8 | 3370.0000 | -2.500000 | . ATL | 17215 | 757.1082 | 11.300113 | . AUS | 2439 | 1514.2530 | 6.019909 | . delay &lt;- filter(delay, count &gt; 20, dest != &quot;HNL&quot;) delay %&gt;% head . A tibble: 6 × 4 destcountdistdelay . &lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . ABQ | 254 | 1826.0000 | 4.381890 | . ACK | 265 | 199.0000 | 4.852273 | . ALB | 439 | 143.0000 | 14.397129 | . ATL | 17215 | 757.1082 | 11.300113 | . AUS | 2439 | 1514.2530 | 6.019909 | . AVL | 275 | 583.5818 | 8.003831 | . ggplot(data = delay, mapping = aes(x = dist, y = delay)) + geom_point(aes(size = count), alpha = 1/3) + geom_smooth(se = FALSE) . `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . delays &lt;- flights %&gt;% group_by(dest) %&gt;% summarize( count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm = TRUE) ) %&gt;% filter(count &gt; 20, dest != &quot;HNL&quot;) . delays %&gt;% head . A tibble: 6 × 4 destcountdistdelay . &lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . ABQ | 254 | 1826.0000 | 4.381890 | . ACK | 265 | 199.0000 | 4.852273 | . ALB | 439 | 143.0000 | 14.397129 | . ATL | 17215 | 757.1082 | 11.300113 | . AUS | 2439 | 1514.2530 | 6.019909 | . AVL | 275 | 583.5818 | 8.003831 | . flights %&gt;% group_by(year, month, day) %&gt;% summarize(mean = mean(dep_delay, na.rm = TRUE)) %&gt;% head . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 6 × 4 yearmonthdaymean . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt; . 2013 | 1 | 1 | 11.548926 | . 2013 | 1 | 2 | 13.858824 | . 2013 | 1 | 3 | 10.987832 | . 2013 | 1 | 4 | 8.951595 | . 2013 | 1 | 5 | 5.732218 | . 2013 | 1 | 6 | 7.148014 | . not_cancelled &lt;- flights %&gt;% filter(!is.na(dep_delay), !is.na(arr_delay)) not_cancelled %&gt;% head . A tibble: 6 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 227 | 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 160 | 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 183 | 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 116 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 150 | 719 | 5 | 58 | 2013-01-01 05:00:00 | . not_cancelled %&gt;% group_by(year, month, day) %&gt;% summarize(mean = mean(dep_delay)) %&gt;% head . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 6 × 4 yearmonthdaymean . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt; . 2013 | 1 | 1 | 11.435620 | . 2013 | 1 | 2 | 13.677802 | . 2013 | 1 | 3 | 10.907778 | . 2013 | 1 | 4 | 8.965859 | . 2013 | 1 | 5 | 5.732218 | . 2013 | 1 | 6 | 7.145959 | . delays &lt;- not_cancelled %&gt;% group_by(tailnum) %&gt;% summarize( delay = mean(arr_delay) ) . delays %&gt;% head # tailnum : 비행기 등록번호 . A tibble: 6 × 2 tailnumdelay . &lt;chr&gt;&lt;dbl&gt; . D942DN | 31.500000 | . N0EGMQ | 9.982955 | . N10156 | 12.717241 | . N102UW | 2.937500 | . N103US | -6.934783 | . N104UW | 1.804348 | . geom_freqpoly : 요약된 수치 값들의 분포를 보여주는(알아서 구간 cut하고 histplot내주는) . ggplot(data = delays, mapping = aes(x = delay)) + geom_freqpoly(binwidth = 10) . 애초에 평균으로 요약된 데이터로 구한 plot으로 특정 한공기 종류는 도착 지연시간 평균이 300분을 넘어가는 것을 볼 수 있다. | . delays &lt;- not_cancelled %&gt;% group_by(tailnum) %&gt;% summarize( delay = mean(arr_delay, na.rm=TRUE), n = n() ) . delays %&gt;% head # n만 추가 . A tibble: 6 × 3 tailnumdelayn . &lt;chr&gt;&lt;dbl&gt;&lt;int&gt; . D942DN | 31.500000 | 4 | . N0EGMQ | 9.982955 | 352 | . N10156 | 12.717241 | 145 | . N102UW | 2.937500 | 48 | . N103US | -6.934783 | 46 | . N104UW | 1.804348 | 46 | . ggplot(data = delays, mapping = aes(x = n, y = delay)) + geom_point(alpha = 0.1) . 해석 : n은 해당 비행기 기종의 운행 횟수를 나타낸 것으로 운행횟수가 많이질수록 평균 지연시간의 변동폭이 적어짐을 알 수 있다.(평균이기에)반대로 평균 운행횟수가 적은 경우 변동폭이 비교적 더 큼. | . not_cancelled %&gt;% group_by(year, month, day) %&gt;% summarize( avg_delay1 = mean(arr_delay), avg_delay2 = mean(arr_delay[arr_delay &gt; 0]) ) %&gt;% head . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 6 × 5 yearmonthdayavg_delay1avg_delay2 . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 2013 | 1 | 1 | 12.651023 | 32.48156 | . 2013 | 1 | 2 | 12.692888 | 32.02991 | . 2013 | 1 | 3 | 5.733333 | 27.66087 | . 2013 | 1 | 4 | -1.932819 | 28.30976 | . 2013 | 1 | 5 | -1.525802 | 22.55882 | . 2013 | 1 | 6 | 4.236429 | 24.37270 | . not_cancelled %&gt;% group_by(dest) %&gt;% summarize(distance_sd = sd(distance)) %&gt;% arrange(desc(distance_sd)) %&gt;% head . A tibble: 6 × 2 destdistance_sd . &lt;chr&gt;&lt;dbl&gt; . EGE | 10.542765 | . SAN | 10.350094 | . SFO | 10.216017 | . HNL | 10.004197 | . SEA | 9.977993 | . LAS | 9.907786 | . not_cancelled %&gt;% group_by(year, month, day) %&gt;% summarize( first = min(dep_time), last = max(dep_time) ) %&gt;% head . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 6 × 5 yearmonthdayfirstlast . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 2013 | 1 | 1 | 517 | 2356 | . 2013 | 1 | 2 | 42 | 2354 | . 2013 | 1 | 3 | 32 | 2349 | . 2013 | 1 | 4 | 25 | 2358 | . 2013 | 1 | 5 | 14 | 2357 | . 2013 | 1 | 6 | 16 | 2355 | . range : 범위를 알려주는 함수 최솟값과 최댓값을 표시 . not_cancelled %&gt;% group_by(year, month, day) %&gt;% mutate(r = min_rank(desc(dep_time))) %&gt;% filter(r %in% range(r)) %&gt;% head . A grouped_df: 6 × 20 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hourr . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt;&lt;int&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | 831 | . 2013 | 1 | 1 | 2356 | 2359 | -3 | 425 | 437 | -12 | B6 | 727 | N588JB | JFK | BQN | 186 | 1576 | 23 | 59 | 2013-01-01 23:00:00 | 1 | . 2013 | 1 | 2 | 42 | 2359 | 43 | 518 | 442 | 36 | B6 | 707 | N580JB | JFK | SJU | 189 | 1598 | 23 | 59 | 2013-01-02 23:00:00 | 928 | . 2013 | 1 | 2 | 2354 | 2359 | -5 | 413 | 437 | -24 | B6 | 727 | N789JB | JFK | BQN | 180 | 1576 | 23 | 59 | 2013-01-02 23:00:00 | 1 | . 2013 | 1 | 3 | 32 | 2359 | 33 | 504 | 442 | 22 | B6 | 707 | N763JB | JFK | SJU | 193 | 1598 | 23 | 59 | 2013-01-03 23:00:00 | 900 | . 2013 | 1 | 3 | 2349 | 2359 | -10 | 434 | 445 | -11 | B6 | 739 | N729JB | JFK | PSE | 199 | 1617 | 23 | 59 | 2013-01-03 23:00:00 | 1 | . n_distinct : 유일값 개수 카운트 여기서는 각 도착지마다의 항공사의 종류 갯수를 나타냄 . not_cancelled %&gt;% group_by(dest) %&gt;% summarize(carriers = n_distinct(carrier)) %&gt;% arrange(desc(carriers)) %&gt;% head . A tibble: 6 × 2 destcarriers . &lt;chr&gt;&lt;int&gt; . ATL | 7 | . BOS | 7 | . CLT | 7 | . ORD | 7 | . TPA | 7 | . AUS | 6 | . - 이건 각 지역으로 가는 도착 총 항공편 수 . not_cancelled %&gt;% count(dest) %&gt;% head . A tibble: 6 × 2 destn . &lt;chr&gt;&lt;int&gt; . ABQ | 254 | . ACK | 264 | . ALB | 418 | . ANC | 8 | . ATL | 16837 | . AUS | 2411 | . - 해당 항공기가 비행한 총 마일 수 . wt : weight약자로 count()에서 사용시 가중 합을 의미 . not_cancelled %&gt;% count(tailnum, wt = distance) %&gt;% head . A tibble: 6 × 2 tailnumn . &lt;chr&gt;&lt;dbl&gt; . D942DN | 3418 | . N0EGMQ | 239143 | . N10156 | 109664 | . N102UW | 25722 | . N103US | 24619 | . N104UW | 24616 | . summarize()&#51032; sum&#44284; mean&#51032;&#48120; . - sum . not_cancelled %&gt;% group_by(year, month, day) %&gt;% summarize(n_early = sum(dep_time &lt; 500)) %&gt;% head . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 6 × 4 yearmonthdayn_early . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 2013 | 1 | 1 | 0 | . 2013 | 1 | 2 | 3 | . 2013 | 1 | 3 | 4 | . 2013 | 1 | 4 | 3 | . 2013 | 1 | 5 | 3 | . 2013 | 1 | 6 | 2 | . 여기서 sum(x &gt; 10), mean(y == 0) 같은 거 사용하면 결과 값이 TRUE, FALSE로 나오기에 밑에 결과값처럼 summarize(sum()) 의 결과 값은 TRUE 의 합(개수)을 알려줌.summarize(mean())의 경우 비율을 알려줌. . - mean . not_cancelled %&gt;% group_by(year, month, day) %&gt;% summarize(hour_prop = mean(arr_delay &gt; 60)) %&gt;% head . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 6 × 4 yearmonthdayhour_prop . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt; . 2013 | 1 | 1 | 0.07220217 | . 2013 | 1 | 2 | 0.08512931 | . 2013 | 1 | 3 | 0.05666667 | . 2013 | 1 | 4 | 0.03964758 | . 2013 | 1 | 5 | 0.03486750 | . 2013 | 1 | 6 | 0.04704463 | . - day . daily &lt;- group_by(flights, year, month, day) (per_day &lt;- summarize(daily, flights = n())) %&gt;% head . `summarise()` has grouped output by &#39;year&#39;, &#39;month&#39;. You can override using the `.groups` argument. . A grouped_df: 6 × 4 yearmonthdayflights . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 2013 | 1 | 1 | 842 | . 2013 | 1 | 2 | 943 | . 2013 | 1 | 3 | 914 | . 2013 | 1 | 4 | 915 | . 2013 | 1 | 5 | 720 | . 2013 | 1 | 6 | 832 | . per_month &lt;- summarize(per_day, flights = sum(flights)) . `summarise()` has grouped output by &#39;year&#39;. You can override using the `.groups` argument. . 위의 경고문 grouping한거에 summarize를 또 씌울 때 나타나는 말이다. 바깥에()를 한번 씌워주면 뒤에서부터 변수 날리면서 통합시켜서 summarize해줌. 여기서는 day 날아감, 그리고 day의 한 단계 위인 해당 month로 통합 한번 더 한다면 month 날리고 그에 해당하는 영역(같은year)까지 통합시킨 결과 보여줌. . - month . (per_month &lt;- summarize(per_day, flights = sum(flights))) . `summarise()` has grouped output by &#39;year&#39;. You can override using the `.groups` argument. . A grouped_df: 12 × 3 yearmonthflights . &lt;int&gt;&lt;int&gt;&lt;int&gt; . 2013 | 1 | 27004 | . 2013 | 2 | 24951 | . 2013 | 3 | 28834 | . 2013 | 4 | 28330 | . 2013 | 5 | 28796 | . 2013 | 6 | 28243 | . 2013 | 7 | 29425 | . 2013 | 8 | 29327 | . 2013 | 9 | 27574 | . 2013 | 10 | 28889 | . 2013 | 11 | 27268 | . 2013 | 12 | 28135 | . - year . (per_year &lt;- summarize(per_month, flights = sum(flights))) . A tibble: 1 × 2 yearflights . &lt;int&gt;&lt;int&gt; . 2013 | 336776 | . - 주의 사항 . 이러한 점진적 요약할때 sum과 count는 괜찮으나 중앙값의 경우 그룹별 중앙값의 중앙값은 실제 전체 중앙값과 다르다. . ungroup : 그룹화 제거 . daily %&gt;% ungroup() %&gt;% # date 기반 그룹화 해제 summarize(flights = n()) #모든 항공편 . A tibble: 1 × 1 flights . &lt;int&gt; . 336776 | . 7. mutate&#47196; &#44536;&#47353;&#54868; &#50836;&#50557; . group_by는 summarize()에서 가장 유용하지만 mutate()와 filter()에서도 가능 | . flights_sml %&gt;% group_by(year, month, day) %&gt;% filter(rank(desc(arr_delay)) &lt; 10) %&gt;% head . A grouped_df: 6 × 7 yearmonthdaydep_delayarr_delaydistanceair_time . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 2013 | 1 | 1 | 853 | 851 | 184 | 41 | . 2013 | 1 | 1 | 290 | 338 | 1134 | 213 | . 2013 | 1 | 1 | 260 | 263 | 266 | 46 | . 2013 | 1 | 1 | 157 | 174 | 213 | 60 | . 2013 | 1 | 1 | 216 | 222 | 708 | 121 | . 2013 | 1 | 1 | 255 | 250 | 589 | 115 | . popular_dests &lt;- flights %&gt;% group_by(dest) %&gt;% filter(n() &gt; 365) popular_dests %&gt;% head . A grouped_df: 6 × 19 yearmonthdaydep_timesched_dep_timedep_delayarr_timesched_arr_timearr_delaycarrierflighttailnumorigindestair_timedistancehourminutetime_hour . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dttm&gt; . 2013 | 1 | 1 | 517 | 515 | 2 | 830 | 819 | 11 | UA | 1545 | N14228 | EWR | IAH | 227 | 1400 | 5 | 15 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 533 | 529 | 4 | 850 | 830 | 20 | UA | 1714 | N24211 | LGA | IAH | 227 | 1416 | 5 | 29 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 542 | 540 | 2 | 923 | 850 | 33 | AA | 1141 | N619AA | JFK | MIA | 160 | 1089 | 5 | 40 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 544 | 545 | -1 | 1004 | 1022 | -18 | B6 | 725 | N804JB | JFK | BQN | 183 | 1576 | 5 | 45 | 2013-01-01 05:00:00 | . 2013 | 1 | 1 | 554 | 600 | -6 | 812 | 837 | -25 | DL | 461 | N668DN | LGA | ATL | 116 | 762 | 6 | 0 | 2013-01-01 06:00:00 | . 2013 | 1 | 1 | 554 | 558 | -4 | 740 | 728 | 12 | UA | 1696 | N39463 | EWR | ORD | 150 | 719 | 5 | 58 | 2013-01-01 05:00:00 | . popular_dests %&gt;% filter(arr_delay &gt; 0) %&gt;% mutate(prop_delay = arr_delay / sum(arr_delay)) %&gt;% select(year:day, dest, arr_delay, prop_delay) %&gt;% head . A grouped_df: 6 × 6 yearmonthdaydestarr_delayprop_delay . &lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt; . 2013 | 1 | 1 | IAH | 11 | 1.106740e-04 | . 2013 | 1 | 1 | IAH | 20 | 2.012255e-04 | . 2013 | 1 | 1 | MIA | 33 | 2.350026e-04 | . 2013 | 1 | 1 | ORD | 12 | 4.239594e-05 | . 2013 | 1 | 1 | FLL | 19 | 9.377853e-05 | . 2013 | 1 | 1 | ORD | 8 | 2.826396e-05 | .",
            "url": "https://jjyun98.github.io/main/2022/07/22/_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EB%B3%80%ED%98%95.html",
            "relUrl": "/2022/07/22/_%EB%8D%B0%EC%9D%B4%ED%84%B0_%EB%B3%80%ED%98%95.html",
            "date": " • Jul 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "(R) tidy data",
            "content": "library(&#39;tidyverse&#39;) . pivot . table4a %&gt;% pivot_longer(c(&#39;1999&#39;, &#39;2000&#39;), names_to = &quot;year&quot;, values_to = &quot;cases&quot;) . A tibble: 6 × 3 countryyearcases . &lt;chr&gt;&lt;chr&gt;&lt;int&gt; . Afghanistan | 1999 | 745 | . Afghanistan | 2000 | 2666 | . Brazil | 1999 | 37737 | . Brazil | 2000 | 80488 | . China | 1999 | 212258 | . China | 2000 | 213766 | . table4a %&gt;% pivot_longer(c(&#39;1999&#39;,&#39;2000&#39;), names_to = &#39;year&#39;, values_to = &#39;population&#39;) . A tibble: 6 × 3 countryyearpopulation . &lt;chr&gt;&lt;chr&gt;&lt;int&gt; . Afghanistan | 1999 | 745 | . Afghanistan | 2000 | 2666 | . Brazil | 1999 | 37737 | . Brazil | 2000 | 80488 | . China | 1999 | 212258 | . China | 2000 | 213766 | . table4a . A tibble: 3 × 3 country19992000 . &lt;chr&gt;&lt;int&gt;&lt;int&gt; . 1Afghanistan | 745 | 2666 | . 2Brazil | 37737 | 80488 | . 3China | 212258 | 213766 | . tidy4a &lt;- table4a %&gt;% pivot_longer(c(&#39;1999&#39;, &#39;2000&#39;), names_to = &#39;year&#39;, values_to = &#39;cases&#39;) tidy4b &lt;- table4b %&gt;% pivot_longer(c(&#39;1999&#39;, &#39;2000&#39;), names_to = &#39;year&#39;, values_to = &#39;population&#39;) left_join(tidy4a, tidy4b) . Joining, by = c(&#34;country&#34;, &#34;year&#34;) . A tibble: 6 × 4 countryyearcasespopulation . &lt;chr&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt; . Afghanistan | 1999 | 745 | 19987071 | . Afghanistan | 2000 | 2666 | 20595360 | . Brazil | 1999 | 37737 | 172006362 | . Brazil | 2000 | 80488 | 174504898 | . China | 1999 | 212258 | 1272915272 | . China | 2000 | 213766 | 1280428583 | .",
            "url": "https://jjyun98.github.io/main/2022/07/22/_tidydata.html",
            "relUrl": "/2022/07/22/_tidydata.html",
            "date": " • Jul 22, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "(R) tibble, parsing",
            "content": "library(&#39;tidyverse&#39;) . - 데이터프레임을 티블로 변형하기 . as_tibble(iris) %&gt;% head . A tibble: 6 × 5 Sepal.LengthSepal.WidthPetal.LengthPetal.WidthSpecies . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 5.0 | 3.6 | 1.4 | 0.2 | setosa | . 5.4 | 3.9 | 1.7 | 0.4 | setosa | . tibble( x = 1:5, y = 1, z = x^2 + y ) . A tibble: 5 × 3 xyz . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 1 | 1 | 2 | . 2 | 1 | 5 | . 3 | 1 | 10 | . 4 | 1 | 17 | . 5 | 1 | 26 | . tibble과 데이터프레임의 차이점 1) 입력 유형을 절대로 변경하지 않는다 ex) 문자열 &gt; factor 2) 변수의 이름을 바꾸거나 행 이름을 생성하지 않는다 3) 티블은 R변수명으로 유효하지 않은 이름도 열 이름으로 가질 수 있다 ex) 공백다만, 이런 변수들을 참조하려면 역따옴표(`)로 감싸야한다고 하는데 안써도 되는데? . tb &lt;- tibble( `apple` = &quot;근본&quot;, &#39; &#39; = &quot;스페이스&quot;, &#39;1000&#39; = &quot;숫자&quot;) . tb . A tibble: 1 × 3 apple 1000 . &lt;chr&gt;&lt;chr&gt;&lt;chr&gt; . 근본 | 스페이스 | 숫자 | . tribble . 티블을 만드는 또 다른 방법(적은 양의 데이터를 빠르게 읽기 쉬운형태로 만드는) 열 헤더는 공식으로 정의(~로 시작), 입력은 쉼표로 구분) . tribble( ~x, ~y, ~z, &quot;c&quot; , 3, 4.0, &quot;a&quot;, 2, 3.6, &quot;b&quot;, 1, 8.5 ) . A tibble: 3 × 3 xyz . &lt;chr&gt;&lt;dbl&gt;&lt;dbl&gt; . c | 3 | 4.0 | . a | 2 | 3.6 | . b | 1 | 8.5 | . tibble( a = lubridate::now() + runif(1e3) * 86400, b = lubridate::today() + runif(1e3) * 30, c = 1:1e3, d = runif(1e3), e = sample(letters, 1e3, replace = TRUE) ) %&gt;% head . A tibble: 6 × 5 abcde . &lt;dttm&gt;&lt;date&gt;&lt;int&gt;&lt;dbl&gt;&lt;chr&gt; . 2022-07-23 18:36:53 | 2022-07-28 | 1 | 0.00343761 | k | . 2022-07-23 13:49:37 | 2022-07-22 | 2 | 0.45199147 | h | . 2022-07-22 21:11:33 | 2022-08-11 | 3 | 0.07705210 | i | . 2022-07-22 22:44:18 | 2022-07-22 | 4 | 0.01277533 | w | . 2022-07-23 03:04:22 | 2022-08-07 | 5 | 0.54975539 | w | . 2022-07-23 02:53:20 | 2022-08-20 | 6 | 0.06460381 | o | . 참고) 1e3 = 1000이다 | . runif : 평균=0, 표준편차=1의 무작위 난수 추출 . print(n=) : 보여주는 행의수 제어 width = Inf : 열 모두 보이기 . nycflights13::flights %&gt;% print(n = 10, width = Inf) . # A tibble: 336,776 × 19 year month day dep_time sched_dep_time dep_delay arr_time sched_arr_time &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; 1 2013 1 1 517 515 2 830 819 2 2013 1 1 533 529 4 850 830 3 2013 1 1 542 540 2 923 850 4 2013 1 1 544 545 -1 1004 1022 5 2013 1 1 554 600 -6 812 837 6 2013 1 1 554 558 -4 740 728 7 2013 1 1 555 600 -5 913 854 8 2013 1 1 557 600 -3 709 723 9 2013 1 1 557 600 -3 838 846 10 2013 1 1 558 600 -2 753 745 arr_delay carrier flight tailnum origin dest air_time distance hour minute &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 11 UA 1545 N14228 EWR IAH 227 1400 5 15 2 20 UA 1714 N24211 LGA IAH 227 1416 5 29 3 33 AA 1141 N619AA JFK MIA 160 1089 5 40 4 -18 B6 725 N804JB JFK BQN 183 1576 5 45 5 -25 DL 461 N668DN LGA ATL 116 762 6 0 6 12 UA 1696 N39463 EWR ORD 150 719 5 58 7 19 B6 507 N516JB EWR FLL 158 1065 6 0 8 -14 EV 5708 N829AS LGA IAD 53 229 6 0 9 -8 B6 79 N593JB JFK MCO 140 944 6 0 10 8 AA 301 N3ALAA LGA ORD 138 733 6 0 time_hour &lt;dttm&gt; 1 2013-01-01 05:00:00 2 2013-01-01 05:00:00 3 2013-01-01 05:00:00 4 2013-01-01 05:00:00 5 2013-01-01 06:00:00 6 2013-01-01 05:00:00 7 2013-01-01 06:00:00 8 2013-01-01 06:00:00 9 2013-01-01 06:00:00 10 2013-01-01 06:00:00 # … with 336,766 more rows . &#49436;&#48652;&#49483; . df &lt;- tibble( x = runif(5), y = rnorm(5) ) df . A tibble: 5 × 2 xy . &lt;dbl&gt;&lt;dbl&gt; . 0.9973514 | -1.1163051 | . 0.2167404 | 0.6167982 | . 0.5017351 | -0.7638092 | . 0.4860576 | -0.2532930 | . 0.3348231 | -0.9161202 | . df$x . &lt;ol class=list-inline&gt;0.997351404977962 | 0.21674042288214 | 0.501735110534355 | 0.486057616304606 | 0.33482308103703 | &lt;/ol&gt; df[[&quot;x&quot;]] . &lt;ol class=list-inline&gt;0.997351404977962 | 0.21674042288214 | 0.501735110534355 | 0.486057616304606 | 0.33482308103703 | &lt;/ol&gt; df[[1]] . &lt;ol class=list-inline&gt;0.997351404977962 | 0.21674042288214 | 0.501735110534355 | 0.486057616304606 | 0.33482308103703 | &lt;/ol&gt; - pipe에서의 서브셋 . 찍어줘야한다 . df %&gt;% .$x . &lt;ol class=list-inline&gt;0.997351404977962 | 0.21674042288214 | 0.501735110534355 | 0.486057616304606 | 0.33482308103703 | &lt;/ol&gt; df %&gt;% .[[&quot;x&quot;]] . &lt;ol class=list-inline&gt;0.997351404977962 | 0.21674042288214 | 0.501735110534355 | 0.486057616304606 | 0.33482308103703 | &lt;/ol&gt; - 일부 오래된 함수의 경우 tibble에서 동작하지 않기에 이 경우 dataframe으로 변환후 사용한다 . class(as.data.frame(tb)) . &#39;data.frame&#39; read_csv . option만 넣음 | . skip = n : 첫 n줄 건너 뛰기 comment = # : #으로 시작하는 모든 줄 무시 col_names = FALSE : 첫 행을 헤드로 취급하지 않고 x1 ~ xn으로 이름 붙임(데이터에 열 이름 없을 때 사용) . parsing . (뜻)parse -&gt; 분석하다 | . parse_무언가() : 문자형 벡터를 입력으로 하여 논리형, 정수형 또는 날짜형과 같은 좀 더 특수화된 벡터를 반환 . - parsing 실패 . 실패하면 경고문과 함께 NA로 표기 이 경우 problems()사용하면 문제점 알려줌 . x &lt;- parse_integer(c(&quot;123&quot;,&quot;345&quot;,&quot;abc&quot;,&quot;123.45&quot;)) . Warning message: “2 parsing failures. row col expected actual 3 -- no trailing characters abc 4 -- no trailing characters 123.45 ” . x . &lt;ol class=list-inline&gt;123 | 345 | &lt;NA&gt; | &lt;NA&gt; | &lt;/ol&gt; problems(x) . A tibble: 2 × 4 rowcolexpectedactual . &lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt; . 3 | NA | no trailing characters | abc | . 4 | NA | no trailing characters | 123.45 | . parse 종류 . parse_logical :논리형 parse_integer : 정수형 parse_double : 엄격한 수치형(★★★) parse_number : 유연한 수치형(★★) -&gt; 각자 다른 방식의 숫자 표현을 써버리기에 parse_character : 문자형 -&gt; 단순하지만 문자 인코딩에서 중요 parse_factor : 팩터형(R이 미리 정해지고 알려진 값으로 범주형 변수를 나타내기 위해 사용하는 데이터 구조) parse_datetime : 날짜/시각(★★★★) -&gt; 날짜를 쓰는 방법은 다양하기에 이들이 제일 복잡 parse_date : 날짜/시각(★★★★) parse_time : 날짜/시각(★★★★) . &#49707;&#51088; parsing . 숫자 파싱이 문제가 되는 3가지 1) 소수점 구별기호 ex) . or , 2) 단위 ex) $ % 3) 간혹 읽기 편하라고 &#39; &#39; 사용 . - 첫 번째 문제 해결 지역에 따라 파싱 옵션을 지정하는 객체인 locale사용 변경이 필요할 경우 새로운 locale을 생성하고 decimal_mark인수를 설정하여 기본값인 .을 다른 값으로 재정의 . parse_double(&quot;1.23&quot;) . 1.23 - 변경 예시 . parse_double(&quot;1,23&quot;, locale = locale(decimal_mark = &quot;,&quot;)) . 1.23 -두 번째 문제 해결 parse_number는 숫자 앞뒤의 비수치 문자(non-numeric character)를 모두 무시 통화 및 백분율에 특히 유용하고 텍스트에 포함된 숫자를 추출하는 데도 효과적 . parse_number(&quot;$100&quot;) . 100 parse_number(&quot;20%&quot;) . 20 - 비수치 문자 무시 예 . parse_number(&quot;It cost $123.45&quot;) . 123.45 - 미국식 처리법 . parse_number(&quot;$123,456,789&quot;) . 123456789 - 유럽식 처리법 . parse_number( &quot;123.456.789&quot;, locale = locale(grouping_mark = &quot;.&quot;)) . 123456789 - factor형 처리 R은 팩터형을 사용하기에, 가질 수 있는 값을 미리 알고 있는 범주형 변수를 나타낸다 . fruit &lt;- c(&quot;apple&quot;, &quot;banana&quot;) parse_factor(c(&quot;apple&quot;, &quot;banana&quot;, &quot;bananana&quot;), levels = fruit) . Warning message: “1 parsing failure. row col expected actual 3 -- value in level set bananana ” . &lt;ol class=list-inline&gt;apple | banana | &lt;NA&gt; | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt;&#39;apple&#39; | &#39;banana&#39; | &lt;/ol&gt; &#45216;&#51676; parsing . parse_datetime(&quot;2010-10-01T2010&quot;) . [1] &#34;2010-10-01 20:10:00 UTC&#34; . parse_datetime(&quot;20101010&quot;) . [1] &#34;2010-10-10 UTC&#34; . parse_date(&quot;2010-10-01&quot;) . 2010-10-01 library(&#39;hms&#39;)# 시간 데이터 다루는 패키지 . parse_time(&quot;20:10:01&quot;) . 20:10:01 . parse_time(&quot;01:10 am&quot;) . 01:10:00 . 위의 예시들로 주어진 데이터를 처리하지 못한다면 나만의 format을 만들어 사용가능 연 %Y(4 자리) %y(2 자리, 00-69 -&gt; 2000-2069, 70-99 -&gt; 1970-1999) 월 %m(2 자리) %b(&quot;jan&quot;과 같이 축약된 명칭) %B(전체 명칭, &quot;January&quot;) 일 %d(2 자리) %e(선택적 선행 공백) 시간 %H(0-23 시간 형식) %I(0-12, %p와 함께 사용해야 함) %p(a.m/p.m표시) %M(분) %S(정수 초) %OS(실수 초) 숫자가 아닌 문자 %.(숫자가 아닌 문자 하나를 건너뛴다) %*(숫자가 아닌 문자 모두를 건너뛴다) . - 시간 데이터 처리 예시 . parse_date(&quot;01/02/15&quot;, &quot;%m/%d/%y&quot;) . 2015-01-02 parse_date(&quot;01/02/15&quot;, &quot;%d/%m/%y&quot;) . 2015-02-01 parse_date(&quot;01/02/15&quot;, &quot;%y/%m/%d&quot;) . 2001-02-15",
            "url": "https://jjyun98.github.io/main/2022/07/22/_tibble_%ED%95%99%EC%8A%B5.html",
            "relUrl": "/2022/07/22/_tibble_%ED%95%99%EC%8A%B5.html",
            "date": " • Jul 22, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "(R) ggplot",
            "content": "library(&#39;tidyverse&#39;) . color . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y= hwy, color = class)) . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y= hwy, size = class)) . Warning message: “Using size for a discrete variable is not advised.” . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y = hwy, alpha = class)) . Warning message: “Using alpha for a discrete variable is not advised.” . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y = hwy, shape = class)) . Warning message: “The shape palette can deal with a maximum of 6 discrete values because more than 6 becomes difficult to discriminate; you have 7. Consider specifying shapes manually if you must have them.” Warning message: “Removed 62 rows containing missing values (geom_point).” . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y= hwy), color = &#39;blue&#39;) . facet_wrap . - 차 종류(class)에 따라 나눈 모습 nrow = 줄 개수 . ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_wrap(~ class, nrow = 3) . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y= hwy)) + facet_grid(drv ~ cyl) . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y= hwy),shape =23) . facet_grid . facet grid에 적은 항목들의 결과 plot 보여줌 . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y =hwy)) + facet_grid(drv ~ cyl) . mpg %&gt;% head . A tibble: 6 × 11 manufacturermodeldisplyearcyltransdrvctyhwyflclass . &lt;chr&gt;&lt;chr&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt;&lt;int&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt; . audi | a4 | 1.8 | 1999 | 4 | auto(l5) | f | 18 | 29 | p | compact | . audi | a4 | 1.8 | 1999 | 4 | manual(m5) | f | 21 | 29 | p | compact | . audi | a4 | 2.0 | 2008 | 4 | manual(m6) | f | 20 | 31 | p | compact | . audi | a4 | 2.0 | 2008 | 4 | auto(av) | f | 21 | 30 | p | compact | . audi | a4 | 2.8 | 1999 | 6 | auto(l5) | f | 16 | 26 | p | compact | . audi | a4 | 2.8 | 1999 | 6 | manual(m5) | f | 18 | 26 | p | compact | . mpg$drv %&gt;% unique() . &lt;ol class=list-inline&gt;&#39;f&#39; | &#39;4&#39; | &#39;r&#39; | &lt;/ol&gt; mpg$cyl %&gt;% unique() . &lt;ol class=list-inline&gt;4 | 6 | 8 | 5 | &lt;/ol&gt; 열이나 행으로 면분할 하고싶지 않다면 변수이름 대신 . 사용 . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y =hwy)) + facet_grid(. ~ cyl) . cyl에 대한 내용만 나옴 . ggplot(data = mpg) + geom_point(mapping = aes(x= displ, y = hwy)) . geom_smooth . ggplot(data = mpg)+ geom_smooth(mapping = aes(x=displ, y= hwy)) . `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . 데이터에 적합된 평활선 . line자체의 shape은 선택 불가지만 line type 선택 해줄 수 있음 . ggplot(data = mpg)+ geom_smooth(mapping = aes(x=displ, y=hwy, linetype = drv)) . `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . 색깔 입히기 가능 . ggplot(data = mpg)+ geom_smooth(mapping = aes(x=displ, y=hwy, group = drv)) . `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . ggplot(data = mpg)+ geom_smooth(mapping = aes(x=displ, y=hwy, color = drv)) . `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . 다 합쳐서 그리기 . ggplot(data = mpg)+ geom_point(mapping = aes(x=displ, y=hwy,color = drv))+ geom_smooth(mapping = aes(x=displ, y=hwy, color = drv, linetype = drv)) . `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . &#53076;&#46300; &#51473;&#48373; &#54588;&#54616;&#44592; . ggplot안에 mapping 해 놓으면 다음번에 안써도 된다 . ggplot(data = mpg, mapping = aes(x= displ, y=hwy)) + geom_point() + geom_smooth() . `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . mapping 해놓고 옵션추가 하고 싶다면 해당 geom에 가서 그 부분만 mapping하고 옵션주면 됨. . ggplot(data = mpg, mapping = aes(x= displ, y=hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth() . `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . filter &#49324;&#50857; . 해당 레이어에 한해서만 smooth 하기위해 filter 사용 se = FALSE하면 그림자 꺼짐 . ggplot(data = mpg, mapping = aes(x= displ, y=hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth( data = filter(mpg, class == &#39;subcompact&#39;), se= FALSE ) . `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; . ggplot(data = diamonds) + geom_bar(mapping = aes(x= cut)) . ggplot(data = diamonds)+ stat_count(mapping = aes(x=cut)) . 이것을 보면 geom_bar의 y축의 default값이 stat_count임을 알 수 있다 이 stat을 다른 값을 주면 y축 종류를 바꿀 수 있음 . demo &lt;- tribble( ~cut, ~freq, &quot;Fair&quot;, 1610, &quot;Good&quot;, 4906, &quot;Very Good&quot;, 12082, &quot;Premium&quot;, 13791, &quot;Ideal&quot;, 21551 ) . demo . A tibble: 5 × 2 cutfreq . &lt;chr&gt;&lt;dbl&gt; . Fair | 1610 | . Good | 4906 | . Very Good | 12082 | . Premium | 13791 | . Ideal | 21551 | . ggplot(data = demo) + geom_bar(mapping = aes(x= cut,y=freq), stat = &#39;identity&#39;) . 비율로 표시하기 . ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, y = stat(prop), group =1) ) . stat_summary로 표현 . ggplot(data = diamonds) + stat_summary( mapping = aes(x = cut, y= depth), fun.ymin = min, fun.ymax = max, fun.y = median ) . Warning message: “`fun.y` is deprecated. Use `fun` instead.” Warning message: “`fun.ymin` is deprecated. Use `fun.min` instead.” Warning message: “`fun.ymax` is deprecated. Use `fun.max` instead.” . geom_bar에서 color 사용시 막대그래프의 테두리 색 선택 geom_bar에서 fill 사용시 막대그래프 자체 색 선택 . ggplot(data = diamonds) + geom_bar(mapping = aes(x= cut, color = cut)) ggplot(data = diamonds) + geom_bar(mapping = aes(x= cut, fill = cut)) . - 다른 변수 추가해서 각각 얼마나 차지하는지 보이기 . ggplot(data = diamonds) + geom_bar(mapping = aes(x= cut, fill = clarity)) . diamonds$clarity %&gt;% unique . &lt;ol class=list-inline&gt;SI2 | SI1 | VS1 | VS2 | VVS2 | VVS1 | I1 | IF | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt;&#39;I1&#39; | &#39;SI2&#39; | &#39;SI1&#39; | &#39;VS2&#39; | &#39;VS1&#39; | &#39;VVS2&#39; | &#39;VVS1&#39; | &#39;IF&#39; | &lt;/ol&gt; position = &#39;identity&#39; : 각 객체를 그래프 문맥에 해당되는 곳에 정확히 배치한다. 다만, 막대그래프에서는 그리 유용하지 않음 . ggplot( data = diamonds, mapping = aes(x = cut, fill = clarity) )+ geom_bar(alpha = 0.3, position = &#39;identity&#39;) . 테두리만 색입히고 막대를 빈공간으로 만드는 것도 가능 . ggplot( data = diamonds, mapping = aes(x = cut, color = clarity) )+ geom_bar(fill = NA, position = &#39;identity&#39;) . position = &#39;fill&#39; : 누적 막대인데 막대 높이를 동일하게 맞춤 비율 비교에 용이 . ggplot(data = diamonds) + geom_bar( mapping = aes(x =cut, fill = clarity), position = &#39;fill&#39; ) . position = &#39;dodge&#39; : 옆으로 쌓기 개별 값들의 비교 용이 . ggplot(data = diamonds) + geom_bar( mapping = aes(x =cut, fill = clarity), position = &#39;dodge&#39; ) . position = &#39;jitter&#39; : 중복된 값 진하게 표시 . ggplot(data = mpg) + geom_point( mapping = aes(x =displ, y=hwy), position = &#39;jitter&#39; ) . coord_flip() : x축 y축 변경 . ggplot(data = mpg, mapping = aes(x = class, y= hwy)) + geom_boxplot() ggplot(data = mpg, mapping = aes(x = class, y= hwy)) + geom_boxplot() + coord_flip() . library(&#39;maps&#39;) # 위도, 경도 가져오는 library . nz &lt;- map_data(&#39;nz&#39;) . nz %&gt;% head . A data.frame: 6 × 6 longlatgrouporderregionsubregion . &lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;int&gt;&lt;chr&gt;&lt;chr&gt; . 1172.7433 | -34.44215 | 1 | 1 | North.Island | NA | . 2172.7983 | -34.45562 | 1 | 2 | North.Island | NA | . 3172.8528 | -34.44846 | 1 | 3 | North.Island | NA | . 4172.8986 | -34.41786 | 1 | 4 | North.Island | NA | . 5172.9593 | -34.42503 | 1 | 5 | North.Island | NA | . 6173.0184 | -34.39895 | 1 | 6 | North.Island | NA | . ggplot(nz, aes(long, lat, group = group)) + geom_polygon(fill = &#39;white&#39;, color = &#39;black&#39;) . coord_quickmap() : 지도에 맞게 가로세로 비율 설정 공간 데이터 plot에서 중요 . ggplot(nz, aes(long, lat, group = group)) + geom_polygon(fill = &#39;white&#39;, color = &#39;black&#39;) + coord_quickmap() . labs : NULL하면 x축이나 y축 이름 안보이게 함 theme(aspect.ratio) : 1이면 정사각형 모양, 그 이상은 세로 길어짐, 이하는 가로가 길어짐 width : 막대 뚱뚱한 정도 show.legend : 범주 표기 여부 . bar &lt;- ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1 ) + theme(aspect.ratio = 1)+ labs(x = NULL, y = NULL) bar + coord_flip() . coord_polar() : pie 차트로 변경 . bar + coord_polar() .",
            "url": "https://jjyun98.github.io/main/2022/07/22/_ggplot_%ED%95%99%EC%8A%B5.html",
            "relUrl": "/2022/07/22/_ggplot_%E1%84%92%E1%85%A1%E1%86%A8%E1%84%89%E1%85%B3%E1%86%B8.html",
            "date": " • Jul 22, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jjyun98.github.io/main/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jjyun98.github.io/main/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}